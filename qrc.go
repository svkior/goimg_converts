package main

// This file is automatically generated by gopkg.in/qml.v1/cmd/genqrc

import (
	"io/ioutil"
	"os"
	"path/filepath"

	"gopkg.in/qml.v1"
)

func init() {
	var r *qml.Resources
	var err error
	if os.Getenv("QRC_REPACK") == "1" {
		err = qrcRepackResources()
		if err != nil {
			panic("cannot repack qrc resources: " + err.Error())
		}
		r, err = qml.ParseResources(qrcResourcesRepacked)
	} else {
		r, err = qml.ParseResourcesString(qrcResourcesData)
	}
	if err != nil {
		panic("cannot parse bundled resources data: " + err.Error())
	}
	qml.LoadResources(r)
}

func qrcRepackResources() error {
	subdirs := []string{"assets"}
	var rp qml.ResourcesPacker
	for _, subdir := range subdirs {
		err := filepath.Walk(subdir, func(path string, info os.FileInfo, err error) error {
			if err != nil {
				return err
			}
			if info.IsDir() {
				return nil
			}
			data, err := ioutil.ReadFile(path)
			if err != nil {
				return err
			}
			rp.Add(filepath.ToSlash(path), data)
			return nil
		})
		if err != nil {
			return err
		}
	}
	qrcResourcesRepacked = rp.Pack().Bytes()
	return nil
}

var qrcResourcesRepacked []byte
var qrcResourcesData = "qres\x00\x00\x00\x01\x00\x00\x12\xda\x00\x00\x00\x14\x00\x00\x12^\x00\x00\b\x80import QtQuick 2.2\r\nimport QtQuick.Controls 1.2\r\nimport QtQuick.Dialogs 1.1\r\nimport QtQuick.Layouts 1.1\r\nimport QtQuick.Window 2.0\r\nimport Qt.labs.folderlistmodel 2.1\r\nimport \"./misc\"\r\n\r\nItem {\r\n\twidth: 1034\r\n\theight: 768\r\n\tSystemPalette {id: palette}\r\n\tclip: true\r\n\r\n\tFileDialog {\r\n\t\tid:fileDialog\r\n\t\tvisible: false\r\n\t\tmodality: Qt.NonModal\r\n\t\ttitle: \"Выберите папку с изображениями\"\r\n\t\tselectExisting: true\r\n\t\tselectMultiple: false\r\n\t\tselectFolder: true\r\n\t\tsidebarVisible: true\r\n\t\tonAccepted: {\r\n\t\t\tconsole.log(\"Accepted: \", fileUrls)\r\n\t\t\tfolderName.text = fileUrls[0]\r\n\t\t\tfolderModel.folder = fileUrls[0]\r\n\t\t}\r\n\t\tonRejected: {\r\n\t\t\tconsole.log(\"Rejected\")\r\n\t\t}\r\n\t}\t\r\n\r\n\r\n\tRectangle{\r\n\t\tid: bottomBar\r\n\t\tcolor: \"#000000\"\r\n\t\tanchors{\r\n\t\t\ttop: parent.top\r\n\t\t\tleft: parent.left\r\n\t\t\tright: parent.right\r\n\t\t\tbottom: parent.bottom\r\n\t\t\t} \r\n\r\n\t\tColumn {\r\n\t\t\tspacing: 6\r\n\t\t\tanchors.top: parent.top\r\n\t\t\tanchors.bottom: parent.bottom\r\n\t\t\tanchors.left: parent.left\r\n\t\t\tanchors.leftMargin: 12\r\n\r\n\t\t\tRow {\r\n\t\t\t\tButton {\r\n\t\t\t\t\ttext: \"Open\"\r\n\t\t\t\t\tonClicked: fileDialog.open()\r\n\t\t\t\t}\r\n\t\t\t\tTextEdit {\r\n\t\t\t\t\tid: folderName\r\n\t\t\t\t\twidth: 240\r\n\t\t\t\t\ttext: \"\"\r\n\t\t\t\t\tfont.family: \"Helvetica\"\r\n\t\t\t\t\tfont.pointSize: 20\r\n\t\t\t\t\tcolor: \"#0000dd\"\r\n\t\t\t\t\tfocus: true\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tRow {\r\n\t\t\t\tspacing: 5\r\n\t\t\t\tListView {\r\n\t\t\t\t\tid: filesList\r\n\t\t\t\t   width: 200\r\n\t \t\t\t   height: parent.height\r\n\t \t\t\t   spacing: 7\r\n\r\n\t    \t\t\tFolderListModel {\r\n\t        \t\tid: folderModel\r\n\t        \t\tshowDirs: false\r\n\t        \t\tnameFilters: [\"*.jpg\", \"*.jpeg\", \"*.png\"]\r\n\t    \t\t\t}\r\n\r\n\t    \t\t\t\r\n\r\n\t    \t\t\tmodel: folderModel\r\n\t    \t\t\tdelegate: Selecti{\r\n\t    \t\t\t\tbtnMode: \"image://pwd/\" + fileURL\r\n\t    \t\t\t\tbtnSelected: imgSrc.source\r\n\t    \t\t\t\tonClicked: {\r\n\t    \t\t\t\t\t//console.log(\"Clicked:\", fileURL);\r\n\t    \t\t\t\t\timgSrc.source = \"image://pwd/\" + fileURL\r\n\t    \t\t\t\t}\r\n\t    \t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tRectangle{\r\n\t\t\t\t\twidth: 810\r\n\t\t\t\t\theight: 610\t\t\t\t\r\n\t\t\t\t\tcolor: \"#888888\"\r\n\t\t\t\t\tImage {\r\n\t\t\t\t\t\tid: imgSrc\r\n\t\t\t\t\t\twidth: 800\r\n\t\t\t\t\t\theight: 600\r\n\t\t\t\t\t\tanchors.centerIn: parent\r\n\t\t\t\t\t\tfillMode: Image.PreserveAspectFit\r\n\t\t\t\t    \tsource: \"./TTS-watermark-white.svg\"\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\x00\x00\thimport QtQuick 2.3\r\n\r\nRectangle {\r\n    id: container\r\n    property alias fontSize : defText.font.pixelSize\r\n    property string btnColor : \"#003300\"\r\n    property string btnColorSelected : \"#006600\"\r\n    property string btnText: fileName\r\n    property string btnMode : \"\"\r\n    property string btnSelected : \"1\"\r\n    property bool canProvideClick // Нужно для того чтобы нажатие пошло дальше\r\n\r\n    signal clicked()\r\n    color: btnTrueColor\r\n\r\n    property bool isEntered : false\r\n    property bool isClicked: false\r\n\r\n    property string btnClickedColor : (isClicked ? Qt.darker(btnPreColor, 2) : btnPreColor)\r\n    property string btnPreColor : (isEntered ? Qt.lighter(btnColor, 1.4) : btnColor)\r\n    property string btnTrueColor : (btnMode == btnSelected ? btnColorSelected : btnClickedColor)\r\n\r\n\r\n    border.color: \"#a37777\" // Поставил коментарий\r\n    border.width: 2\r\n    radius: 5\r\n\r\n    width: 200\r\n    height: 40\r\n\r\n    DefText {\r\n        id:defText\r\n        anchors.fill: parent\r\n        horizontalAlignment: Text.AlignHCenter\r\n        verticalAlignment: Text.AlignVCenter\r\n        font.pixelSize: 24\r\n        color: container.border.color\r\n        text: container.btnText\r\n    }\r\n    gradient: Gradient {\r\n        GradientStop {\r\n            position: 0.0; color: (btnMode == btnSelected ? \"#202020\" : Qt.darker(btnClickedColor))\r\n        }\r\n        GradientStop {\r\n            position: 0.3\r\n            color:\r\n                    btnTrueColor\r\n        }\r\n        GradientStop {\r\n            position: 1.0; color: (btnMode == btnSelected ? \"#202020\" : Qt.darker(btnClickedColor))\r\n        }\r\n    }\r\n    MouseArea {\r\n        id: mouseArea\r\n        anchors.fill: parent\r\n        hoverEnabled: true\r\n        onEntered: container.isEntered = true\r\n        onExited:   {\r\n            container.isEntered = false\r\n            container.isClicked = false\r\n            container.canProvideClick = false // Если вышли при нажатой мыши, то не вызывать действие\r\n        }\r\n        onPressed: {\r\n            container.canProvideClick = true;\r\n            container.isClicked = true\r\n        }\r\n        onReleased: {\r\n            container.isClicked = false\r\n            if(container.canProvideClick){\r\n                container.clicked(container.btnText)\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n}\x00\x00\x00Vimport QtQuick 2.3\r\n\r\nText {\r\n    font.family: \"Arial\"\r\n    wrapMode: Text.WordWrap\r\n}\x00\x06\x06\x8a\x9c\xb3\x00a\x00s\x00s\x00e\x00t\x00s\x00\x04\x00\a@\x93\x00m\x00i\x00s\x00c\x00\x0f\x066Q<\x00i\x00m\x00g\x00p\x00r\x00o\x00v\x00i\x00d\x00e\x00r\x00.\x00q\x00m\x00l\x00\v\n\x1b\xd5\\\x00S\x00e\x00l\x00e\x00c\x00t\x00i\x00.\x00q\x00m\x00l\x00\v\fb#|\x00D\x00e\x00f\x00T\x00e\x00x\x00t\x00.\x00q\x00m\x00l\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x12\x00\x02\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00 \x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00D\x00\x00\x00\x00\x00\x01\x00\x00\b\x84\x00\x00\x00`\x00\x00\x00\x00\x00\x01\x00\x00\x11\xf0"
